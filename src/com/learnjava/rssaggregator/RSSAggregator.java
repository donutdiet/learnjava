package com.learnjava.rssaggregator;

import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author Put your name here
 *
 */
public final class RSSAggregator {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSAggregator() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        String title = "Empty Title";
        // find index of child with tag labeled "title"
        int titleIndex = getChildElement(channel, "title");
        // check whether title tag is blank
        if (channel.child(titleIndex).numberOfChildren() > 0) {
            // update title variable to content within the title tag
            title = "";
            title = channel.child(titleIndex).child(0).label();
        }

        // link tag always present and link will always have child element
        int channelURLIndex = getChildElement(channel, "link");
        String channelURL = channel.child(channelURLIndex).child(0).label();

        String description = "Empty Description";
        // find index of description tag labeled "description"
        int descriptionIndex = getChildElement(channel, "description");
        // check whether description tag is blank
        if (channel.child(descriptionIndex).numberOfChildren() > 0) {
            // update description variable to content within the description tag
            description = "";
            description = channel.child(descriptionIndex).child(0).label();
        }

        // root of HTML document
        out.println("<html>");
        out.println("<head>");
        // title of document
        out.println("<title>" + title + "</title>");
        out.println("</head>");
        // document body, which contains all the random stuff
        out.println("<body>");
        // the main heading and contains a link to the website
        out.println(
                "<h1><a href=\"" + channelURL + "\">" + title + "</a></h1>");
        // paragraph tag to hold the description
        out.println("<p>" + description + "</p>");
        // sets borders around the cells of the table
        out.println("<table border = \"1\">");
        // defines new row of cells in table
        out.println("<tr>");
        // defines cell as header of a group of table cells
        out.println("<th>Date</th>");
        out.println("<th>Source</th>");
        out.println("<th>News</th>");
        out.println("</tr>");
    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("</table>");
        out.println("</body>");
        out.println("</html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        // default index to -1 in case no matching child with label "tag" is found in xml
        int index = -1;
        /*
         * loop through every child in xml starting from the last child, so the
         * returned index is the closest to the start
         */
        for (int i = 0; i < xml.numberOfChildren(); i++) {
            if (xml.child(i).isTag() && xml.child(i).label().equals(tag)) {
                /*
                 * updates index to the index of the most recent child of xml
                 * that is a tag and has a label equal to tag
                 */
                index = i;
            }
        }
        return index;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        // initialize pubDate in case there is no pubDate tag present in item
        String pubDate = "No date available";
        int pubDateIndex = getChildElement(item, "pubDate");
        // check if there is a pubDate tag present in item tree
        if (pubDateIndex != -1) {
            pubDate = item.child(pubDateIndex).child(0).label();
        }

        // initialize source title and url in case there is no source tag present in item
        String sourceTitle = "No source available";
        String sourceURL = "";
        int sourceIndex = getChildElement(item, "source");
        // check if there is a source tag present in item tree
        if (sourceIndex != -1) {
            sourceTitle = "";
            sourceTitle = "Source";
            // check if source tag is not empty
            if (item.child(sourceIndex).numberOfChildren() > 0) {
                // updates the value of sourceTitle and sourceURL variable
                sourceTitle = "";
                sourceTitle = item.child(sourceIndex).child(0).label();
            }
            // is it possible for source tag to be empty??
            sourceURL = item.child(sourceIndex).attributeValue("url");
        }

        // initialize title, description, and url in case they are not present in item
        String title = "No title available";
        String description = "No title available";
        int titleIndex = getChildElement(item, "title");
        int descriptionIndex = getChildElement(item, "description");
        if (titleIndex != -1) {
            // check if title tag is empty
            if (item.child(titleIndex).numberOfChildren() > 0) {
                // updates the value of title variable
                title = item.child(titleIndex).child(0).label();
            }
        }
        if (descriptionIndex != -1) {
            // check if title tag is empty
            if (item.child(descriptionIndex).numberOfChildren() > 0) {
                // updates the value of description variable
                description = item.child(descriptionIndex).child(0).label();
            }
        }

        // initialize link in case there is no link tag present in item
        String link = "";
        int linkIndex = getChildElement(item, "link");
        if (linkIndex != -1) {
            // check if link tag is empty
            if (item.child(linkIndex).numberOfChildren() > 0) {
                // updates the value of link variable
                link = item.child(linkIndex).child(0).label();
            }
        }

        // defines a row of cells in a table
        out.println("<tr>");
        out.println("<th>" + pubDate + "</th>");

        // check whether a source title is found to determine if a url link is needed
        if (sourceTitle.equals("No source available")) {
            out.println("<th>" + sourceTitle + "</th>");
        } else {
            out.println("<th><a href=\"" + sourceURL + "\">" + sourceTitle
                    + "</th>");
        }

        // check whether either title or description is present in item
        if (!link.equals("")) {
            if (title.equals("No title available")) {
                out.println("<th><a href=\"" + link + "\">" + description
                        + "</th>");
            } else {
                out.println("<th><a href=\"" + link + "\">" + title + "</th>");
            }
        } else {
            if (title.equals("No title available")) {
                out.println("<th>" + description + "</th>");
            } else {
                out.println("<th>" + title + "</th>");
            }
        }

        out.println("</tr>");
    }

    /**
     * Processes one XML RSS (version 2.0) feed from a given URL converting it
     * into the corresponding HTML output file.
     *
     * @param url
     *            the URL of the RSS feed
     * @param file
     *            the name of the HTML output file
     * @param out
     *            the output stream to report progress or errors
     * @updates out.content
     * @requires out.is_open
     * @ensures <pre>
     * [reads RSS feed from url, saves HTML document with table of news items
     *   to file, appends to out.content any needed messages]
     * </pre>
     */
    private static void processFeed(String url, String file, SimpleWriter out) {

        XMLTree xml = new XMLTree1(url);
        // html page for the individual rss links
        SimpleWriter outHtml = new SimpleWriter1L(file);

        // make sure the link is acc rss
        assert xml.label().equals("rss") : "wrong link or smth";
        assert xml.attributeValue("version").equals("2.0") : "wrong version";

        XMLTree channel = xml.child(0);

        // input channel subtree in outputHeader method
        outputHeader(channel, outHtml);

        // loop through children of channel tag looking for item tag
        for (int i = 0; i < channel.numberOfChildren(); i++) {
            if (channel.child(i).label().equals("item")
                    && channel.child(i).isTag()) {
                // process data from each item tag into rows of chart
                processItem(channel.child(i), outHtml);
            }
        }

        // output footer
        outputFooter(outHtml);
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();
        SimpleWriter outputFeed = new SimpleWriter1L("index2.html");

        // prompt user for rss feed url
        out.println("Enter an rss file url: ");
        String rssInput = in.nextLine();
        XMLTree feeds = new XMLTree1(rssInput);

        // initialize title in case there is not title element
        String title = "No title Available";
        if (feeds.hasAttribute("title")) {
            title = feeds.attributeValue("title");
        }

        // html formatting for the main rss feed page
        outputFeed.println("<html>");
        outputFeed.println("<head>");
        outputFeed.println("<title>" + title + "</title>");
        outputFeed.println("</head>");
        outputFeed.println("<body>");
        outputFeed.println("<h2>" + title + "</h2>");
        outputFeed.println("<ul>");

        // initialize url file and name
        String url = "";
        String file = "";
        String name = "No name";
        for (int i = 0; i < feeds.numberOfChildren(); i++) {
            // search for feed tags in rss feed
            if (feeds.child(i).label().equals("feed")) {
                // reassign variables to their respective components
                url = feeds.child(i).attributeValue("url");
                file = feeds.child(i).attributeValue("file");
                name = feeds.child(i).attributeValue("name");

                processFeed(url, file, outputFeed);

                // list each rss thing in the unordered list
                outputFeed.println(
                        "<li><a href =\"" + file + "\">" + name + "</li>");
            }
        }

        // clsoing tags for list page
        outputFeed.println("</ul>");
        outputFeed.println("</body>");
        outputFeed.println("</html>");

        // close input and output streams
        in.close();
        out.close();
        outputFeed.close();
    }

}
